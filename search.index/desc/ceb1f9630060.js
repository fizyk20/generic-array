rd_("EeThe main mapping from a generic <code>const: usize</code> to a <code>UInt</code>: \xe2\x80\xa6AeThe type-level bit 0.AeThe type-level bit 1.CjAlias for the associated type of <code>IsEqual</code>: \xe2\x80\xa6ClAlias for the associated type of <code>IsGreater</code>: \xe2\x80\xa6CiAlias for the associated type of <code>IsLess</code>: \xe2\x80\xa6DcThe output type produced by this <code>Serializer</code> during \xe2\x80\xa60DcMust match the <code>Ok</code> type of our <code>Serializer</code>.000000ChAlias for the associated type of <code>BitOr</code>: \xe2\x80\xa6B`The type-level signed integer 0.CaGeneric data structure deserialization framework.AkConvenient type operations.DaA <strong>type operator</strong> that returns the absolute value.CiAlias for the associated type of <code>BitAnd</code>: \xe2\x80\xa6ChThe <strong>marker trait</strong> for compile time bits.FhA <strong>type operator</strong> for comparing <code>Self</code> and <code>Rhs</code>. It provides a \xe2\x80\xa6CfAlias for the associated type of <code>Pow</code>: \xe2\x80\xa6DnA <strong>type operator</strong> that computes the greatest common divisor \xe2\x80\xa6CfAlias for the associated type of <code>Gcd</code>: \xe2\x80\xa6DfThe concrete value for the type. Can be used in <code>const</code> \xe2\x80\xa6EjA <strong>type operator</strong> that gives the length of an <code>Array</code> or the \xe2\x80\xa6C`The input contained a map that was not expected.FdA <strong>type operator</strong> that returns the maximum of <code>Self</code> and <code>Rhs</code>.FdA <strong>type operator</strong> that returns the minimum of <code>Self</code> and <code>Rhs</code>.CfAlias for the associated type of <code>Rem</code>: \xe2\x80\xa6FnA <strong>Marker trait</strong> for the types <code>Greater</code>, <code>Equal</code>, and <code>Less</code>.DmA <strong>type operator</strong> that provides exponentiation by repeated \xe2\x80\xa6CeThe input contained a sequence that was not expected.EiThe input contained a <code>&amp;str</code> or <code>String</code> that was not expected.CfAlias for the associated type of <code>Add</code>: \xe2\x80\xa6CiAlias for the associated type of <code>BitXor</code>: \xe2\x80\xa6CgMacro allowing for easy construction of Generic Arrays.A`Type-level bits.DhA convenience macro for comparing type numbers. Use <code>op!</code> \xe2\x80\xa6C`Check for remaining elements after passing a \xe2\x80\xa60AnFinish serializing a sequence.AkFinish serializing a tuple.BbFinish serializing a tuple struct.BcFinish serializing a tuple variant.AiFinish serializing a map.AlFinish serializing a struct.BdFinish serializing a struct variant.CjFormat an explanation of what data was being expected. \xe2\x80\xa6AkType-level signed integers.BlReturns the number of elements in the array.ChThis function isn\xe2\x80\x99t used in this crate, but may be \xe2\x80\xa6DlMaps a <code>GenericSequence</code> to another <code>GenericSequence</code>.EhReturns an array of the same size as <code>self</code>, with function <code>f</code> \xe2\x80\xa6AlMethod returning the maximumAlMethod returning the minimumCiCreate a new borrowed deserializer from the given string.BoCreate a new deserializer from the given bytes.CnCreate a new borrowed deserializer from the given borrowed \xe2\x80\xa6CiConstruct a new <code>MapDeserializer&lt;I, E&gt;</code>.CiConstruct a new <code>SeqDeserializer&lt;I, E&gt;</code>.ClConstruct a new <code>SeqAccessDeserializer&lt;A&gt;</code>.ClConstruct a new <code>MapAccessDeserializer&lt;A&gt;</code>.CmConstruct a new <code>EnumAccessDeserializer&lt;A&gt;</code>.BoInstantiates a singleton representing this bit.0CgInstantiates a singleton representing this strictly \xe2\x80\xa60CdInstantiates a singleton representing the integer 0.2CgInstantiates a singleton representing this unsigned \xe2\x80\xa60DgMove value inside a <code>Zeroizing</code> wrapper which ensures it \xe2\x80\xa6BoGeneric data structure serialization framework.DdCombines two <code>GenericSequence</code> instances and iterates \xe2\x80\xa6BcAlias to make it easy to add 1: \xe2\x80\xa6CjThe input contained a boolean value that was not expected.CnThe input contained a <code>char</code> that was not expected.BbAlias to make it easy to cube. \xe2\x80\xa6CfAlias for the associated type of <code>Sub</code>: \xe2\x80\xa6CbThe input contained an enum that was not expected.DcAlias for the associated type of <code>IsGreaterOrEqual</code>: \xe2\x80\xa6D`Alias for the associated type of <code>IsLessOrEqual</code>: \xe2\x80\xa6DiA potential output from <code>Cmp</code>, this is the type equivalent \xe2\x80\xa6CmAlias for the associated type of <code>Logarithm2</code>: \xe2\x80\xa6BnType-level signed integers with negative sign.BnType-level signed integers with positive sign.CfAlias for the associated type of <code>Mul</code>: \xe2\x80\xa6CfAlias for the associated type of <code>Div</code>: \xe2\x80\xa6CbSequence to be concatenated with <code>self</code>FiA <strong>type operator</strong> that ensures that <code>Rhs</code> is the same as <code>Self</code>, \xe2\x80\xa6DdSize of an array type, expressed as a <code>typenum</code>-based \xe2\x80\xa6CmAlias for the associated type of <code>SquareRoot</code>: \xe2\x80\xa6BhAlias to make it easy to subtract 1: \xe2\x80\xa6De<code>TArr</code> is a type that acts as an array of types. It is \xe2\x80\xa6Do<code>UInt</code> is defined recursively, where <code>B</code> is the least \xe2\x80\xa6DaThe input contained a unit <code>()</code> that was not expected.EkA <strong>marker trait</strong> to designate that a type is zero. Only <code>B0</code>, \xe2\x80\xa6CjFolds (or reduces) a sequence of data into a single value.AoReturns the argument unchanged.000000000000000000000000000000000000000000000000BaCalls <code>U::from(self)</code>.000000000000000000000000000000000000000000000000BcReturns an iterator over the array.ChThis function isn\xe2\x80\x99t used in this crate, but may be \xe2\x80\xa6CmCreate a new type-level array. Only usable on Rust 1.13.0 \xe2\x80\xa6AmType-level unsigned integers.BeThe terminating type for type arrays.Fb<code>Array</code> is a newtype for an inner <code>[T; N]</code> array where <code>N</code> is \xe2\x80\xa6EkThe input contained a <code>&amp;[u8]</code> or <code>Vec&lt;u8&gt;</code> that was not \xe2\x80\xa6CoUsed to allow the usage of <code>U</code> in a generic context.DiA potential output from <code>Cmp</code>, this is the type equivalent \xe2\x80\xa6ClThe error type that can be returned if some error occurs \xe2\x80\xa6CkThe error type when some error occurs during serialization.111110DfMust match the <code>Error</code> type of our <code>Serializer</code>.000000EcThe <code>Error</code> trait allows <code>Deserialize</code> implementations to \xe2\x80\xa6ClA minimal representation of all possible errors that can \xe2\x80\xa6DgTrait used by <code>Serialize</code> implementations to generically \xe2\x80\xa6BgFirst part of the resulting split arrayEfThe input contained a floating point <code>f32</code> or <code>f64</code> that was \xe2\x80\xa6CmAlias for the associated type of <code>IsNotEqual</code>: \xe2\x80\xa6ChA message stating what uncategorized thing the input \xe2\x80\xa6DkDefines a <code>GenericSequence</code> that can be split into two parts \xe2\x80\xa6DoA <strong>type operator</strong> for taking a concrete integer value from a \xe2\x80\xa6DiThe terminating type for <code>UInt</code>; it always comes after the \xe2\x80\xa6BeThe type produced by using this seed.BcThe value produced by this visitor.BiA type-level array of type-level numbers.DgSupported array sizes: <code>typenum::Unsigned</code> types with an \xe2\x80\xa6CnSplits an array at the given index, returning the separate \xe2\x80\xa6CoSplits <code>self</code> at index <code>N</code> in two arrays.ClBuilding blocks for deserializing basic values using the \xe2\x80\xa6CfAlias for the associated type of <code>Abs</code>: \xe2\x80\xa6EhType alias for <code>Array</code> which is const generic around a size <code>N</code>\xe2\x80\xa6DgDefines <code>GenericSequence</code>s which can be joined together, \xe2\x80\xa6BkAlias to make it easy to multiply by 2. \xe2\x80\xa6FlA <strong>type operator</strong> that returns <code>True</code> if <code>Self &lt; Rhs</code>, otherwise \xe2\x80\xa6Bk<code>GenericArray</code> associated lengthCfAlias for the associated type of <code>Len</code>: \xe2\x80\xa6Dm<code>GenericSequence</code> that has one more element than <code>Self</code>AdMapped sequence typeCfAlias for the associated type of <code>Neg</code>: \xe2\x80\xa6DjThe input contained an <code>Option&lt;T&gt;</code> that was not expected.BoResulting sequence formed by the concatenation.CkResulting sequence formed by removing an element at the \xe2\x80\xa6AgFlattened sequence typeAiUnflattened sequence typeBbShould always be <code>Self</code>AcThe absolute value.BaThe result of the exponentiation.ClThe result of the comparison. It should only ever be one \xe2\x80\xa6BlThe length as a type-level unsigned integer.BaThe type of the result of the sumBeThe type of the result of the productBfThe type of the result of the divisionDaThe type of the minimum of <code>Self</code> and <code>Rhs</code>DaThe type of the maximum of <code>Self</code> and <code>Rhs</code>DdThe type representing either <code>True</code> or <code>False</code>00000BfThe result of the integer square root.BkThe result of the integer binary logarithm.AlThe greatest common divisor.DmThe <code>UN</code> type corresponding to <code>Self = Const&lt;N&gt;</code>.DdDefines a <code>GenericSequence</code> which can be shortened by \xe2\x80\xa6BhSecond part of the resulting split arrayDhA <strong>type operator</strong> that, when implemented for unsigned \xe2\x80\xa6CfAlias for the associated type of <code>Shl</code>: \xe2\x80\xa6G`The input contained a signed integer <code>i8</code>, <code>i16</code>, <code>i32</code> or <code>i64</code> \xe2\x80\xa6BdAlias to make it easy to square. \xe2\x80\xa6CoUsed to allow the usage of <code>U</code> in a generic context.CnReturns a new array with the given element appended to the \xe2\x80\xa6BlReturns a pointer to the start of the array.BdConcatenate, or join, two sequences.CgConcatenates <code>self</code> with <code>other</code>.CkRaised when there is general error when deserializing a \xe2\x80\xa6DjUsed when a <code>Serialize</code> implementation encounters any error \xe2\x80\xa6ClRemoves an element at the given index, shifting elements \xe2\x80\xa6CaMethod returning the concrete value for the type.DhCreate a new array of <code>MaybeUninit&lt;T&gt;</code> items, in an \xe2\x80\xa6DfCreate an uninitialized array of <code>MaybeUninit</code>s for the \xe2\x80\xa6CfAlias for the associated type of <code>Cmp</code>: \xe2\x80\xa6AkThe constant default value.EeDefines a <code>GenericSequence</code> of <code>GenericArray</code>s which can be \xe2\x80\xa6DmA <strong>type operator</strong> that gives the sum of all elements of an \xe2\x80\xa6DnA <strong>type operator</strong> that gives the product of all elements of \xe2\x80\xa6CjAlias for the associated type of <code>FoldAdd</code>: \xe2\x80\xa6DiA potential output from <code>Cmp</code>, this is the type equivalent \xe2\x80\xa6DcThe <strong>marker trait</strong> for compile time signed integers.F`A <strong>type operator</strong> that returns <code>True</code> if <code>Self == Rhs</code>, \xe2\x80\xa6CfAlias for the associated type of <code>Max</code>: \xe2\x80\xa6CfAlias for the associated type of <code>Min</code>: \xe2\x80\xa6DmA <strong>marker trait</strong> to designate that a type is not zero. All \xe2\x80\xa6DdDefines a <code>GenericSequence</code> which can be shortened by \xe2\x80\xa6Dm<code>GenericSequence</code> that has one less element than <code>Self</code>CfAlias for the associated type of <code>Shr</code>: \xe2\x80\xa6DiThe <code>Visitor</code> that will be used to deserialize the content \xe2\x80\xa6ChThis trait represents a visitor that walks through a \xe2\x80\xa6BnTrait for securely erasing values from memory.EfLike <code>arr!</code>, but returns a <code>Box&lt;GenericArray&lt;T, N&gt;&gt;</code>CnFlattens the sequence into a single <code>GenericArray</code>.DkCreate array where each array element <code>T</code> is returned by the \xe2\x80\xa6CiMethod returning <code>True</code> or <code>False</code>.CkReturns a new array with the given element prepended to \xe2\x80\xa6CgThis crate provides type-level numbers evaluated at \xe2\x80\xa6Dh<code>variant</code> is called to identify which variant to deserialize.DiSecurely zero memory with a simple trait (<code>Zeroize</code>) built \xe2\x80\xa6CjZero out this object from memory using Rust intrinsics \xe2\x80\xa6Eg<code>Expected</code> represents an explanation of what data a <code>Visitor</code> \xe2\x80\xa6CjAlias for the associated type of <code>FoldMul</code>: \xe2\x80\xa6DgDefines any <code>GenericSequence</code> which can be lengthened or \xe2\x80\xa6CjOwned sequence type used in conjunction with reference \xe2\x80\xa6GbThe input contained an unsigned integer <code>u8</code>, <code>u16</code>, <code>u32</code> or <code>u64</code>\xe2\x80\xa6DeThe <strong>marker trait</strong> for compile time unsigned integers.EkFrom <code>&amp;self</code> of this version, create a reference to a <code>Array</code> \xe2\x80\xa6CgReturns the remaining items of this iterator as a sliceBmExtracts a slice containing the entire array.CnReturns a slice containing the entire array. Equivalent to \xe2\x80\xa6CgInitializes a new sequence instance using the given \xe2\x80\xa6FfConverts a <code>Box&lt;GenericArray&lt;T, N&gt;&gt;</code> into <code>Vec&lt;T&gt;</code> without \xe2\x80\xa6CiMethod returning <code>True</code> or <code>False</code>.CeReturns an iterator that allows modifying each value.DkThis returns <code>Ok(Some(key))</code> for the next key in the map, or \xe2\x80\xa6CnReturns a new array without the last element, and the last \xe2\x80\xa6CnUseful traits for manipulating sequences of data stored in \xe2\x80\xa6BfThe input contains an <code>i8</code>.BeThe input contains a <code>u8</code>.EfTrait which associates a <code>usize</code> size and <code>ArrayType</code> with a \xe2\x80\xa6CjAssociated type representing the underlying contiguous \xe2\x80\xa6BjArray type which corresponds to this size.FlA <strong>type operator</strong> that returns <code>True</code> if <code>Self &gt; Rhs</code>, otherwise \xe2\x80\xa6DhProvides a <code>Visitor</code> access to each entry of a map in the \xe2\x80\xa6DkProvides a <code>Visitor</code> access to each element of a sequence in \xe2\x80\xa6DjA <strong>data structure</strong> that can be serialized into any data \xe2\x80\xa60ChAlias for the result of calling <code>SetBit</code>: \xe2\x80\xa6DiThe <strong>marker trait</strong> for type-level arrays of type-level \xe2\x80\xa6EfDefines a <code>GenericSequence</code> of <code>T</code> which can be split evenly \xe2\x80\xa6Ed<code>Zeroizing</code> is a a wrapper for any <code>Z: Zeroize</code> type which \xe2\x80\xa6CnFormat a message stating what data this Visitor expects to \xe2\x80\xa6CdCreate a <code>GenericArray</code> from an iterator.CnCreates a consuming iterator, that is, one that moves each \xe2\x80\xa6CjReturns a new array without the first element, and the \xe2\x80\xa6CeSerialize this value into the given Serde serializer.0CmReturns the number of elements remaining in the sequence, \xe2\x80\xa6CjReturns the number of entries remaining in the map, if \xe2\x80\xa6DnSplits <code>&amp;self</code> at index <code>N</code> in two array references.DfUnflattens the sequence into a sequence of <code>GenericArray</code>s.BgThe input contains an <code>f32</code>.BgThe input contains an <code>f64</code>.BgThe input contains an <code>i16</code>.BgThe input contains an <code>i32</code>.BgThe input contains an <code>i64</code>.BcThe input contains a key-value map.BjThe input contains a sequence of elements.CnThe input contains a string. The lifetime of the string is \xe2\x80\xa6BfThe input contains a <code>u16</code>.BfThe input contains a <code>u32</code>.BfThe input contains a <code>u64</code>.D`Obtain a <code>&amp;mut Array</code> reference for a given type.CmObtain an <code>&amp;Array</code> reference for a given type.DhProvides a <code>Visitor</code> access to the data of an enum in the \xe2\x80\xa6ChAn efficient way of discarding data from a deserializer.DhHelper type for implementing a <code>Serializer</code> that does not \xe2\x80\xa6F`A <strong>type operator</strong> that returns <code>True</code> if <code>Self != Rhs</code>, \xe2\x80\xa6DoA <strong>type operator</strong> for taking the integer binary logarithm of \xe2\x80\xa6DgDivision as a partial function. This <strong>type operator</strong> \xe2\x80\xa6DnThe <strong>marker trait</strong> for type-level numbers which are a power \xe2\x80\xa6DhA <strong>data format</strong> that can serialize any data structure \xe2\x80\xa60EiA <strong>type operator</strong> for taking the integer square root of <code>Self</code>.CkFallible trait for representing cases where zeroization \xe2\x80\xa6Dj<code>Unexpected</code> represents an unexpected invocation of any one \xe2\x80\xa6CdReturns a mutable pointer to the start of the array.DeConvert a native array into <code>GenericArray</code> of the same \xe2\x80\xa6FdFrom a <code>Array</code> from <code>hybrid-array</code> 0.4, create a <code>GenericArray</code> \xe2\x80\xa6CfConverts a slice to a generic array reference with \xe2\x80\xa6CkConvert the given slice into a reference to a hybrid array.BmFunctional programming with generic sequencesDiConvert the <code>GenericArray</code> into a native array of the same \xe2\x80\xa6FeFrom <code>self</code> of this version, create a <code>Array</code> from <code>hybrid-array</code>\xe2\x80\xa6CiMethod returning <code>True</code> or <code>False</code>.DaThis returns <code>Ok(Some((key, value)))</code> for the next \xe2\x80\xa6DdThis returns a <code>Ok(value)</code> for the next value in the map.FnSerde is a framework for <em><strong>ser</strong></em>ializing and <em><strong>de</strong></em>serializing \xe2\x80\xa6BnIndicate that a struct field has been skipped.CfIndicate that a struct variant field has been skipped.AmThe input contains a boolean.BgThe input contains a <code>char</code>.AkThe input contains an enum.BgThe input contains a <code>i128</code>.BnThe input contains an optional that is absent.BoThe input contains an optional that is present.BgThe input contains a <code>u128</code>.BjThe input contains a unit <code>()</code>.BgThe associated <code>ArrayLength</code>Eb<code>ArrayLength</code> is a type-level <code>Unsigned</code> integer used to \xe2\x80\xa6DlA <strong>data structure</strong> that can be deserialized from any data \xe2\x80\xa60CmError for <code>TryFrom</code> and <code>try_from_iter</code>CmAlias for the associated type of <code>PartialDiv</code>: \xe2\x80\xa6CiThe input contained a unit variant that was not expected.CnAsserts that a type is <code>True</code>, aka <code>B1</code>.DhExtracts the values from a generic array of <code>MaybeUninit</code> \xe2\x80\xa6DhExtract the values from an array of <code>MaybeUninit</code> containers.AmCollect an iterator as a map.0BbCollect an iterator as a sequence.0DkSerialize a string produced by an implementation of <code>Display</code>\xe2\x80\xa60CiDeserialize this value from the given Serde deserializer.0DgEquivalent to the more common <code>Deserialize::deserialize</code> \xe2\x80\xa6CdConvert a slice of native arrays into a slice of \xe2\x80\xa6EjConverts a slice <code>GenericArray&lt;T, N&gt;</code> into a slice of <code>[T; N]</code>BbMethod for performing the divisionAlgithub\xe2\x80\x82crates-io\xe2\x80\x82docs-rsCkRemoves an element at the given index, swapping it with \xe2\x80\xa6DdCreate array fallibly where each array element <code>T</code> is \xe2\x80\xa6CfTry to zero out this object from memory using Rust \xe2\x80\xa6CmThe input contains a byte array. The lifetime of the byte \xe2\x80\xa6CgImplements a compilation time default value for the \xe2\x80\xa6DjA <strong>data format</strong> that can deserialize any data structure \xe2\x80\xa6CbThe type of the deserializer being converted into.1DoStruct representing a generic array - <code>GenericArray&lt;T, N&gt;</code> \xe2\x80\xa6DhAccessor for <code>GenericSequence</code> item type, which is really \xe2\x80\xa6DeType returned from <code>serialize_map</code> for serializing the \xe2\x80\xa60CeReturned from <code>Serializer::serialize_map</code>.DeType returned from <code>serialize_seq</code> for serializing the \xe2\x80\xa60CeReturned from <code>Serializer::serialize_seq</code>.CjThe input contained a tuple variant that was not expected.CoConverts this type into a mutable <code>Array</code> reference.DbConverts this type into an immutable <code>Array</code> reference.FkTakes a <code>&amp;Array&lt;Array&lt;T, N&gt;, &gt;&gt;</code>, and flattens it to a <code>&amp;[T]</code>.DoFrom <code>&amp;mut self</code> of this version, create a mutable reference \xe2\x80\xa6CmReturns the remaining items of this iterator as a mutable \xe2\x80\xa6CeExtracts a mutable slice containing the entire array.ChReturns a mutable slice containing the entire array. \xe2\x80\xa6CaRustCrypto: Hybrid Const Generic / Typenum ArraysDiRaised when a <code>Deserialize</code> receives a type different from \xe2\x80\xa6CiMethod returning <code>True</code> or <code>False</code>.DgThis returns <code>Ok(Some(value))</code> for the next value in the \xe2\x80\xa6BcSerialize an <code>i8</code> value.0BbSerialize a <code>u8</code> value.0FiAttempts to convert a <code>Vec&lt;T&gt;</code> into <code>Box&lt;GenericArray&lt;T, N&gt;&gt;</code> \xe2\x80\xa6CcCalled when deserializing a variant with no values.Dh<code>variant</code> is called to identify which variant to deserialize.FcA <strong>type operator</strong> that returns <code>True</code> if <code>Self &lt;= Rhs</code>, \xe2\x80\xa6CkThe input contained a newtype struct that was not expected.CkThe input contained a struct variant that was not expected.Db<code>VariantAccess</code> is a visitor that is created by the \xe2\x80\xa6BoMarker trait signifying that this type will \xe2\x80\xa6CiReturns the constant \xe2\x80\x9cdefault value\xe2\x80\x9d for an array \xe2\x80\xa6EeAlternative to <code>Box::&lt;GenericArray&lt;T, N&gt;&gt;::default()</code> that \xe2\x80\xa6CkThis crate implements a structure that can be used as a \xe2\x80\xa6DhRaised when a <code>Deserialize</code> receives a value of the right \xe2\x80\xa6CjAll of the <strong>marker traits</strong> used in typenum.DjRaised when a <code>Deserialize</code> struct type expected to receive \xe2\x80\xa6DkThis returns <code>Ok(Some(key))</code> for the next key in the map, or \xe2\x80\xa6BdSerialize an <code>f32</code> value.0BdSerialize an <code>f64</code> value.0BdSerialize an <code>i16</code> value.0BdSerialize an <code>i32</code> value.0BdSerialize an <code>i64</code> value.0AdSerialize a map key.CkBegin to serialize a map. This call must be followed by \xe2\x80\xa60CkBegin to serialize a variably sized sequence. This call \xe2\x80\xa60BbSerialize a <code>&amp;str</code>.0BcSerialize a <code>u16</code> value.0BcSerialize a <code>u32</code> value.0BcSerialize a <code>u64</code> value.0EbSplits <code>&amp;mut self</code> at index <code>N</code> in two mutable array \xe2\x80\xa6CkFallible equivalent of <code>FromIterator::from_iter</code>CiConstruct an array from the given iterator, returning \xe2\x80\xa6BoCalled when deserializing a tuple-like variant.DgRaised when a <code>Deserialize</code> struct type received a field \xe2\x80\xa6DjAssociates an <code>ArraySize</code> with a given type. Can be used to \xe2\x80\xa6BjA deserializer holding an <code>i8</code>.BkAccessor type for a mapped generic sequenceCfThe input contained a newtype variant that was not \xe2\x80\xa6DgType returned from <code>serialize_tuple</code> for serializing the \xe2\x80\xa60CgReturned from <code>Serializer::serialize_tuple</code>.BiA deserializer holding a <code>u8</code>.BdAsserts that two types are the same.EbHint that the <code>Deserialize</code> type is expecting an <code>i8</code> value.0EaHint that the <code>Deserialize</code> type is expecting a <code>u8</code> value.0CgConverts a mutable slice to a mutable generic array \xe2\x80\xa6CmConvert the given mutable slice to a mutable reference to \xe2\x80\xa6CmRaised when deserializing a sequence or map and the input \xe2\x80\xa6BdSerialize a <code>bool</code> value.0AfSerialize a character.0BeSerialize an <code>i128</code> value.0BdSerialize a <code>None</code> value.0BgSerialize a <code>Some(T)</code> value.0BdSerialize a <code>u128</code> value.0BbSerialize a <code>()</code> value.0C`Called when deserializing a struct-like variant.CfConverts a slice to a generic array reference with \xe2\x80\xa6EfUseful <strong>type operators</strong> that are not defined in <code>core::ops</code>.DdMarker trait for types whose <code>Default</code> is the desired \xe2\x80\xa6Ee<code>DeserializeSeed</code> is the stateful form of the <code>Deserialize</code> \xe2\x80\xa6BkA deserializer holding an <code>f32</code>.BkA deserializer holding an <code>f64</code>.CgDefines some sequence with an associated length and \xe2\x80\xa6BkA deserializer holding an <code>i16</code>.BkA deserializer holding an <code>i32</code>.BkA deserializer holding an <code>i64</code>.CfImplemented for types which can have an associated \xe2\x80\xa6BhA deserializer that iterates over a map.BmA deserializer that iterates over a sequence.DhType returned from <code>serialize_struct</code> for serializing the \xe2\x80\xa60ChReturned from <code>Serializer::serialize_struct</code>.BoA deserializer holding a <code>&amp;str</code>.BjA deserializer holding a <code>u16</code>.BjA deserializer holding a <code>u32</code>.BjA deserializer holding a <code>u64</code>.DhRequire the <code>Deserializer</code> to figure out how to drive the \xe2\x80\xa60EbHint that the <code>Deserialize</code> type is expecting a <code>f32</code> value.0EbHint that the <code>Deserialize</code> type is expecting a <code>f64</code> value.0EcHint that the <code>Deserialize</code> type is expecting an <code>i16</code> value.0EcHint that the <code>Deserialize</code> type is expecting an <code>i32</code> value.0EcHint that the <code>Deserialize</code> type is expecting an <code>i64</code> value.0DeHint that the <code>Deserialize</code> type is expecting a map of \xe2\x80\xa60DjHint that the <code>Deserialize</code> type is expecting a sequence of \xe2\x80\xa60DkHint that the <code>Deserialize</code> type is expecting a string value \xe2\x80\xa60EbHint that the <code>Deserialize</code> type is expecting a <code>u16</code> value.0EbHint that the <code>Deserialize</code> type is expecting a <code>u32</code> value.0EbHint that the <code>Deserialize</code> type is expecting a <code>u64</code> value.0DiRaised when a <code>Deserialize</code> struct type received more than \xe2\x80\xa6CkConvert a mutable slice of native arrays into a mutable \xe2\x80\xa6EaConverts a mutable slice <code>GenericArray&lt;T, N&gt;</code> into a mutable \xe2\x80\xa6ChCalled when deserializing a variant with a single value.DaThis returns <code>Ok(Some((key, value)))</code> for the next \xe2\x80\xa6DdThis returns a <code>Ok(value)</code> for the next value in the map.BcSerialize a chunk of raw byte data.0CfSerialize a map entry consisting of a key and a value.AoSerialize a tuple struct field.B`Serialize a tuple variant field.AiSerialize a struct field.BaSerialize a struct variant field.ChBegin to serialize a statically sized sequence whose \xe2\x80\xa60AfSerialize a map value.DjSplits the shared slice into a slice of <code>U</code>-element arrays, \xe2\x80\xa6DgRaised when a <code>Deserialize</code> enum type received a variant \xe2\x80\xa6BkA deserializer holding a <code>bool</code>.BkA deserializer holding a <code>char</code>.DgAssociated <code>ArrayLength</code> for one <code>Const&lt;N&gt;</code>CeA data structure that can be deserialized without \xe2\x80\xa6CiAn iterator that moves out of a <code>GenericArray</code>BlA deserializer holding an <code>i128</code>.DjConverts an existing value into a <code>Deserializer</code> from which \xe2\x80\xa6FcA <strong>type operator</strong> that returns <code>True</code> if <code>Self &gt;= Rhs</code>, \xe2\x80\xa6BkA deserializer holding a <code>u128</code>.BiA deserializer holding a <code>()</code>.EhTakes a <code>&amp;mut Array&lt;Array&lt;T, N&gt;,M&gt;</code>, and flattens it to a \xe2\x80\xa6CfClone the contents of the slice as a new hybrid array.EcHint that the <code>Deserialize</code> type is expecting a <code>bool</code> value.0EcHint that the <code>Deserialize</code> type is expecting a <code>char</code> value.0DjHint that the <code>Deserialize</code> type is expecting an enum value \xe2\x80\xa60EdHint that the <code>Deserialize</code> type is expecting an <code>i128</code> value.0EdHint that the <code>Deserialize</code> type is expecting an <code>u128</code> value.0DfHint that the <code>Deserialize</code> type is expecting a unit value.0FhConverts a <code>Box&lt;GenericArray&lt;T, N&gt;&gt;</code> into <code>Box&lt;[T]&gt;</code> without \xe2\x80\xa6CiMethod returning <code>True</code> or <code>False</code>.ClAliases for the type operators used in this crate. Their \xe2\x80\xa6ChRemoves an element at the given index without bounds \xe2\x80\xa6BdBegin to serialize a struct like \xe2\x80\xa60DaA deserializer holding a <code>&amp;[u8]</code>. Always calls \xe2\x80\xa6Eg<code>GenericArray</code> with a const-generic <code>usize</code> length, using the \xe2\x80\xa6BmA deserializer holding an <code>isize</code>.BlA deserializer holding a <code>usize</code>.CoConverts a slice of <code>T</code> elements into a slice of \xe2\x80\xa6DiHint that the <code>Deserialize</code> type is expecting a byte array \xe2\x80\xa60DjHint that the <code>Deserialize</code> type is expecting a sequence of \xe2\x80\xa60BgConvert this value into a deserializer.DeDetermine whether <code>Deserialize</code> implementations should \xe2\x80\xa6DcDetermine whether <code>Serialize</code> implementations should \xe2\x80\xa610DgThis returns <code>Ok(Some(value))</code> for the next value in the \xe2\x80\xa6AmSerialize a sequence element.AjSerialize a tuple element.ElConvert a slice of <code>GenericArray&lt;T, N&gt;</code> into a slice of <code>T</code>, \xe2\x80\xa6CnZeroizes a flat type/struct. Only zeroizes the values that \xe2\x80\xa6CfDefines functional programming methods for generic \xe2\x80\xa6BlTransform slice to slice of core array type.DhHint that the <code>Deserialize</code> type is expecting an optional \xe2\x80\xa60DkHint that the <code>Deserialize</code> type is expecting a string value \xe2\x80\xa60DjHint that the <code>Deserialize</code> type is expecting a struct with \xe2\x80\xa60CfObtain a flattened slice from a slice of array chunks.CgConverts a mutable slice to a mutable generic array \xe2\x80\xa6CnThe input contains a string that lives at least as long as \xe2\x80\xa6CiMethod returning <code>True</code> or <code>False</code>.DeSplits the exclusive slice into a slice of <code>U</code>-element \xe2\x80\xa6CoLike <code>GenericArray::try_from_iter</code> but returns a \xe2\x80\xa6DjType returned from <code>serialize_tuple_struct</code> for serializing \xe2\x80\xa60CnReturned from <code>Serializer::serialize_tuple_struct</code>.CnCouldn\xe2\x80\x99t construct an array from an iterator because the \xe2\x80\xa6<DiHint that the <code>Deserialize</code> type is expecting a byte array \xe2\x80\xa60ChCalled when deserializing a variant with a single value.FjAttempts to convert a <code>Box&lt;[T]&gt;</code> into <code>Box&lt;GenericArray&lt;T, N&gt;&gt;</code>\xe2\x80\xa6CjThe input contains a byte array that lives at least as \xe2\x80\xa6BdThe input contains a newtype struct.C`A deserializer holding a <code>MapAccess</code>.CmDefines the relationship between one generic sequence and \xe2\x80\xa6C`A deserializer holding a <code>SeqAccess</code>.DkType returned from <code>serialize_tuple_variant</code> for serializing \xe2\x80\xa60CoReturned from <code>Serializer::serialize_tuple_variant</code>.DfConverts a mutable slice of <code>T</code> elements into a mutable \xe2\x80\xa6EkSerialize a unit struct like <code>struct Unit</code> or <code>PhantomData&lt;T&gt;</code>.0ElConvert a slice of <code>GenericArray&lt;T, N&gt;</code> into a slice of <code>T</code>, \xe2\x80\xa6ChRemoves an element at the given index without bounds \xe2\x80\xa6CbA deserializer holding an <code>EnumAccess</code>.D`Type returned from <code>serialize_struct_variant</code> for \xe2\x80\xa60D`Returned from <code>Serializer::serialize_struct_variant</code>.CjTransform mutable slice to mutable slice of core array \xe2\x80\xa6DjHint that the <code>Deserialize</code> type is expecting the name of a \xe2\x80\xa60DiModule with some <code>const</code>-generics-friendly definitions, to \xe2\x80\xa6BjBegin to serialize a tuple struct like \xe2\x80\xa60E`Serialize a unit variant like <code>E::A</code> in <code>enum E { A, B }</code>.0ClObtain a mutable flattened slice from a mutable slice of \xe2\x80\xa6DjA deserializer holding a <code>&amp;str</code> with a lifetime tied to \xe2\x80\xa6DfHint that the <code>Deserialize</code> type needs to deserialize a \xe2\x80\xa60DjHint that the <code>Deserialize</code> type is expecting a unit struct \xe2\x80\xa60D`Begin to serialize a tuple variant like <code>E::T</code> in \xe2\x80\xa609DkHint that the <code>Deserialize</code> type is expecting a tuple struct \xe2\x80\xa60DdSerialize a newtype struct like <code>struct Millimeters(u8)</code>.0DaBegin to serialize a struct variant like <code>E::S</code> in \xe2\x80\xa60DkA deserializer holding a <code>&amp;[u8]</code> with a lifetime tied to \xe2\x80\xa6EdSerialize a newtype variant like <code>E::N</code> in <code>enum E { N(u8) }</code>.0DfHint that the <code>Deserialize</code> type is expecting a newtype \xe2\x80\xa60DjHelper macro when implementing the <code>Deserializer</code> part of a \xe2\x80\xa6")